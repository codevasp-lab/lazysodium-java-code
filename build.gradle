/*
 * Copyright (c) Terl Tech Ltd • 14/06/19 17:54 • goterl.com
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

import com.vanniktech.maven.publish.SonatypeHost

plugins {
    id 'application'
    id 'java-library'
    id 'maven-publish'
    id 'com.vanniktech.maven.publish' version '0.29.0'
    id 'signing'
}

ext {
    artifactId = "lazysodium-java-code"
    groupId = "io.github.sean-codevasp"
    version = '0.1.0'
    description = "Lazy sodium (Java) makes it effortless for Java " +
            "developers to get started with Libsodium's cryptography."
}

repositories {
    mavenCentral()
}

group project.ext.groupId
version = project.ext.version

mainClassName = "com.codevasp.lazysodium.LazySodium"

sourceCompatibility = 17
targetCompatibility = 17

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources"
        }
    }
}

signing {
    sign publishing.publications
}

mavenPublishing {
    signAllPublications()
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)

    coordinates("io.github.sean-codevasp", "lazysodium-java-code", "0.1.0")

    // POM 설정
    pom {
        /**
         name = '[라이브러리 이름]'
         description = '[라이브러리 설명]'
         url = '[오픈소스 Repository Url]'
         */
        name = 'lazysodium-java-code'
        description = "Lazy sodium (Java) makes it effortless for Java " +
                "developers to get started with Libsodium's cryptography."
        url = '<https://github.com/sean-codevasp/lazysodium-java-code>'

        // 라이선스 정보
        licenses {
            license {
                name = 'Mozilla Public License Version 2.0'
                url = '<https://github.com/sean-codevasp/lazysodium-java-code/blob/master/LICENSE>'
            }
        }

        // 개발자 정보
        developers {
            developer {
                id = 'sean-codevasp'
                name = 'Seonghoon Ju'
                email = 'sean.ju@codevasp.com'
            }
        }

        /**
         connection = 'scm:git:github.com/[Github 사용자명]/[오픈소스 Repository 이름].git'
         developerConnection = 'scm:git:ssh://github.com/[Github 사용자명]/[오픈소스 Repository 이름].git'
         url = '<https://github.com/>[Github 사용자명]/[오픈소스 Repository 이름]/tree/[배포 브랜치명]'
         */
        scm {
            connection = 'scm:git:github.com/sean-codevasp/lazysodium-java-code.git'
            developerConnection = 'scm:git:ssh://github.com/sean-codevasp/lazysodium-java-code.git'
            url = '<https://github.com/sean-codevasp/lazysodium-java-code/tree/master>'
        }
    }
}

tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Dependencies
dependencies {
    implementation 'net.java.dev.jna:jna:5.14.0'
    implementation 'org.slf4j:slf4j-api:2.0.16'
    testImplementation 'org.slf4j:slf4j-simple:2.0.16'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.3'
}

void loadProps() {
    File secretPropsFile = project.rootProject.file('local.properties')
    if (secretPropsFile.exists()) {
        Properties p = new Properties()
        new FileInputStream(secretPropsFile).withCloseable { is ->
            p.load(is)
        }
        p.each { name, value ->
            ext[name] = value
        }
    }
}

loadProps()

// Force character encoding in case the workspace was not set up correctly
tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Test).configureEach {
    // a collection to track failedTests
    ext.failedTests = []

    afterTest { descriptor, result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            String failedTest = "${descriptor.className}::${descriptor.name}"
            logger.debug("Adding " + failedTest + " to failedTests...")
            failedTests << [failedTest]
        }
    }

    afterSuite { suite, result ->
        if (!suite.parent) { // will match the outermost suite
            // logs each failed test
            if (!failedTests.empty) {
                logger.lifecycle("Failed tests:")
                failedTests.each { failedTest ->
                    logger.lifecycle("${failedTest}")
                }
            }
        }
    }
}